import firebase from 'firebase/app';
import 'firebase/firestore';
import 'firebase/auth';

const config = {
    apiKey: "AIzaSyA_lzpLSm8rOc2Mp7Qq-cuY95XHl3F5gHs",
    authDomain: "crwn-db-f7e71.firebaseapp.com",
    projectId: "crwn-db-f7e71",
    storageBucket: "crwn-db-f7e71.appspot.com",
    messagingSenderId: "122283392197",
    appId: "1:122283392197:web:22a4ce1db7509e0c1904ac",
    measurementId: "G-EQJRBMZH7D"
  };


  //This method is , After getting auth object by logging in , it checks if there is values using snapshot object
  //if 26 line , i.e snapshot doesnot exists a new document is saved with the new crdentials in the database
  export const createUserProfileDocument = async (userAuth , additionalData) => {
       
    if (!userAuth) {
          return;
        }
       
        const userRef = firestore.doc(`users/${userAuth.uid}`)
        const snapShot = await userRef.get();
        if (!snapShot.exists) {
            const { displayName , email } = userAuth;
            const createdAt = new Date();

           

            try {
              await userRef.set({
                displayName ,
                email ,
                createdAt ,
                ...additionalData
              })
            } catch (error) {
              console.log("Error creating user");
            }
        }

        return userRef;

  }

firebase.initializeApp(config);

//collectionRef.doc() .. this line asks firestore to give new document with autogenerated id
export const addCollectionAndDocuments = async (collectionKey , objectsToAdd ) => {
  const collectionRef = firestore.collection(collectionKey);
  console.log(collectionRef);
  const batch = firestore.batch();
  objectsToAdd.forEach(obj => {
    const newDocRef = collectionRef.doc();
    batch.set(newDocRef , obj);
    
  });
  
  return await batch.commit()

}

export const convertCollectionSnapshotToMap = (collections) => {
  const transformedCollection = collections.docs.map(doc => {
    const { title , items } = doc.data();
    return {
       routeName : encodeURI(title.toLowerCase()) ,
       id : doc.id ,
       title ,
       items
    }
  })

  return transformedCollection.reduce((accumulator , collection) => {
    accumulator[collection.title.toLowerCase()] = collection;
    return accumulator;
  } , {});

}

export const getCurrentUser = () => {
  return new Promise((resolve , reject) => {
    const unsubscribe = auth.onAuthStateChanged(userAuth => {
      unsubscribe();
      resolve(userAuth)
    } , reject)
  })
}

export const auth = firebase.auth();
export const firestore = firebase.firestore();

export const googleProvider = new firebase.auth.GoogleAuthProvider();
googleProvider.setCustomParameters({ prompt : 'select_account'});
export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);

export default firebase;

